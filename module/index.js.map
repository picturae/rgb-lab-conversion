{"version":3,"file":"index.js","sources":["../src/data.js","../src/cases.js","../src/index.js"],"sourcesContent":["const whitePoint = {\n    D50: [0.96422, 1, 0.82521],\n    D65: [0.95047, 1, 1.08883],\n}\n\nconst rgbSpaces = {\n    AdobeRGB1998: {\n        name: 'Adobe RGB (1998)',\n        gamma: 2.19921875,\n        matrix: {\n            D50: {\n                X: { red: 0.6097559, green: 0.2052401, blue: 0.149224 },\n                Y: { red: 0.3111242, green: 0.625656, blue: 0.0632197 },\n                Z: { red: 0.0194811, green: 0.0608902, blue: 0.7448387 },\n            },\n            D65: {\n                X: { red: 0.5767309, green: 0.185554, blue: 0.1881852 },\n                Y: { red: 0.2973769, green: 0.6273491, blue: 0.0752741 },\n                Z: { red: 0.0270343, green: 0.0706872, blue: 0.9911085 },\n            },\n        },\n        whitepoint: 'D65',\n    },\n    eciRGB_v2: {\n        name: 'eciRGB v2',\n        gamma: 1.8,\n        matrix: {\n            D50: {\n                X: { red: 0.6502043, green: 0.1780774, blue: 0.1359384 },\n                Y: { red: 0.3202499, green: 0.6020711, blue: 0.0776791 },\n                Z: { red: 0.0, green: 0.067839, blue: 0.757371 },\n            },\n            D65: {\n                X: { red: 0.67, green: 0.21, blue: 0.14 },\n                Y: { red: 0.33, green: 0.71, blue: 0.08 },\n                Z: { red: 0, green: 0.08, blue: 0.78 },\n            },\n        },\n        whitepoint: 'D50',\n    },\n    grayGamma22: {\n        // based on AdobeRGB1998\n        name: 'Gray Gamma 2.2',\n        gamma: 2.19921875,\n        matrix: {\n            D50: {\n                X: {\n                    red: 0.3111242 * whitePoint.D50[0],\n                    green: 0.625656 * whitePoint.D50[0],\n                    blue: 0.0632197 * whitePoint.D50[0],\n                },\n                Y: { red: 0.3111242, green: 0.625656, blue: 0.0632197 },\n                Z: {\n                    red: 0.3111242 * whitePoint.D50[2],\n                    green: 0.625656 * whitePoint.D50[2],\n                    blue: 0.0632197 * whitePoint.D50[2],\n                },\n            },\n            D65: {\n                X: {\n                    red: 0.2973769 * whitePoint.D65[0],\n                    green: 0.6273491 * whitePoint.D65[0],\n                    blue: 0.0752741 * whitePoint.D65[0],\n                },\n                Y: { red: 0.2973769, green: 0.6273491, blue: 0.0752741 },\n                Z: {\n                    red: 0.2973769 * whitePoint.D65[2],\n                    green: 0.6273491 * whitePoint.D65[2],\n                    blue: 0.0752741 * whitePoint.D65[2],\n                },\n            },\n        },\n        whitepoint: 'D65',\n    },\n    sRGB: {\n        name: 'sRGB IEC61966-2.1',\n        gamma: -2.2,\n        matrix: {\n            D50: {\n                X: { red: 0.4360747, green: 0.3850649, blue: 0.1430804 },\n                Y: { red: 0.2225045, green: 0.7168786, blue: 0.0606169 },\n                Z: { red: 0.0139322, green: 0.0971045, blue: 0.7141733 },\n            },\n            D65: {\n                X: { red: 0.4124564, green: 0.3575761, blue: 0.1804375 },\n                Y: { red: 0.2126729, green: 0.7151522, blue: 0.072175 },\n                Z: { red: 0.0193339, green: 0.119192, blue: 0.9503041 },\n            },\n        },\n        whitepoint: 'D65',\n    },\n}\n\nexport { whitePoint, rgbSpaces }\n","// for test and demo\nconst cases = {}\ncases.squares = [\n    {\n        rgb: [51, 51, 51],\n        eciRGB_v2: [20, 0, 0],\n        AdobeRGB1998: [20, 0, 0],\n        grayGamma22: [20, 0, 0],\n        sRGB: [21, 0, 0],\n    },\n    {\n        rgb: [204, 204, 204],\n        eciRGB_v2: [80, 0, 0],\n        AdobeRGB1998: [83, 0, 0],\n        grayGamma22: [83, 0, 0],\n        sRGB: [82, 0, 0],\n    },\n    {\n        rgb: [154, 51, 52],\n        eciRGB_v2: [40, 53, 34],\n        AdobeRGB1998: [42, 53, 33],\n        grayGamma22: [42, 0, 0],\n        sRGB: [37, 44, 24],\n    },\n\n    {\n        rgb: [153, 51, 153],\n        eciRGB_v2: [43, 55, -26],\n        AdobeRGB1998: [44, 60, -31],\n        grayGamma22: [44, 0, 0],\n        sRGB: [40, 52, -35],\n    },\n    {\n        rgb: [255, 255, 51],\n        eciRGB_v2: [97, -11, 99],\n        AdobeRGB1998: [98, -16, 96],\n        grayGamma22: [98, 0, 0],\n        sRGB: [98, -15, 87],\n    },\n    {\n        rgb: [255, 102, 52],\n        eciRGB_v2: [69, 78, 79],\n        AdobeRGB1998: [69, 69, 68],\n        grayGamma22: [69, 0, 0],\n        sRGB: [63, 58, 58],\n    },\n\n    {\n        rgb: [50, 51, 255],\n        eciRGB_v2: [39, 39, -100],\n        AdobeRGB1998: [36, 57, -104],\n        grayGamma22: [36, 0, 0],\n        sRGB: [36, 55, -101],\n    },\n    {\n        rgb: [52, 255, 51],\n        eciRGB_v2: [83, -128, 74],\n        AdobeRGB1998: [84, -121, 79],\n        grayGamma22: [84, 0, 0],\n        sRGB: [88, -75, 74],\n    },\n    {\n        rgb: [255, 51, 52],\n        eciRGB_v2: [65, 91, 77],\n        AdobeRGB1998: [64, 86, 63],\n        grayGamma22: [64, 0, 0],\n        sRGB: [57, 75, 52],\n    },\n]\n\nexport { cases }\n","import { whitePoint, rgbSpaces } from './data.js'\nimport { cases } from './cases.js'\n\nconst kappa = 24389 / 27 // 903.3\nconst epsilon = 216 / 24389 // 0.008856\n\nconst rgbLabConversion = (function() {\n    const inverseSRGB = function(fractionedRGB, iccProfile) {\n        // http://www.brucelindbloom.com/index.html?Eqn_RGB_to_XYZ.html\n        const inversedSRGB = fractionedRGB.map(channel => {\n            if (channel > 0.04045) {\n                channel = Math.pow((channel + 0.055) / 1.055, 2.4)\n            } else {\n                channel = channel / 12.92\n            }\n            return channel\n        })\n        return inversedSRGB\n    }\n    const inverseLx = function(fractionedRGB, iccProfile) {\n        // http://www.color.org/chardata/rgb/ecirgb.xalter\n        // Inverse eciRGB Companding\n        const inversedLx = fractionedRGB.map(channel => {\n            if (channel > epsilon) {\n                channel = Math.pow((channel + 0.16) / 1.16, 3)\n            } else {\n                channel = channel / kappa / 100\n            }\n            return channel\n        })\n        return inversedLx\n    }\n    const inverseGamma = function(fractionedRGB, iccProfile) {\n        // http://www.brucelindbloom.com/index.html?Eqn_RGB_to_XYZ.html\n        // https://www.easyrgb.com/en/math.php\n        const inversedGamma = fractionedRGB.map(channel =>\n            Math.pow(channel, iccProfile.gamma),\n        )\n        return inversedGamma\n    }\n\n    /**\n     * XYZ to Lab conversion with color temperature correction\n     * @param {number[]} xyzArray\n     * @param {number[]} whitePoint\n     * @returns {number[]} labArray\n     */\n    const XYZ_CIELab = function(xyzArray, whitePoint) {\n        const sizedXYZ = xyzArray.map(\n            (channel, index) => channel / whitePoint[index] / 100,\n        )\n        // console.log('L*ab after whitepoint', sizedXYZ)\n\n        const [X, Y, Z] = sizedXYZ.map((channel, index) => {\n            if (channel > epsilon) {\n                channel = Math.pow(channel, 1 / 3)\n            } else {\n                channel = 7.787 * channel + 16 / 116\n            }\n            return channel\n        })\n\n        const Lx = 116 * Y - 16\n        const ax = 500 * (X - Y)\n        const bx = 200 * (Y - Z)\n        return [Lx, ax, bx]\n    }\n\n    /**\n     * RGB to XYZ companding for some icc profiles\n     * @param {number[]} rgbArray\n     * @param {string} iccProfileName - one of the predefined rgbSpaces\n     * @returns {number[]} xyzArray\n     */\n    const RGB_XYZ_compand = function(rgbArray, iccProfileName) {\n        const iccProfile = rgbSpaces[iccProfileName]\n        if (!iccProfile || !iccProfile.name) {\n            console.error(`unknown iccProfile \"${iccProfileName}\"`)\n            return\n        }\n\n        // convert to fractions\n        const fractionedRGB = rgbArray.map(channel => channel / 255)\n\n        let inverse\n        switch (iccProfile.name) {\n            case 'Adobe RGB (1998)':\n                inverse = inverseGamma\n                break\n            case 'eciRGB v2':\n                inverse = inverseLx\n                break\n            case 'Gray Gamma 2.2':\n                inverse = inverseGamma\n                break\n            case 'sRGB IEC61966-2.1':\n                inverse = inverseSRGB\n                break\n            default:\n                console.error(`unsupported iccProfile \"${iccProfile.name}\"`)\n                return\n        }\n        const inversedRGB = inverse(fractionedRGB, iccProfile)\n\n        // console.log('XYZ before whitepoint', inversedRGB)\n        const X =\n            inversedRGB[0] * 100 * iccProfile.matrix.D50.X.red +\n            inversedRGB[1] * 100 * iccProfile.matrix.D50.X.green +\n            inversedRGB[2] * 100 * iccProfile.matrix.D50.X.blue\n        const Y =\n            inversedRGB[0] * 100 * iccProfile.matrix.D50.Y.red +\n            inversedRGB[1] * 100 * iccProfile.matrix.D50.Y.green +\n            inversedRGB[2] * 100 * iccProfile.matrix.D50.Y.blue\n        const Z =\n            inversedRGB[0] * 100 * iccProfile.matrix.D50.Z.red +\n            inversedRGB[1] * 100 * iccProfile.matrix.D50.Z.green +\n            inversedRGB[2] * 100 * iccProfile.matrix.D50.Z.blue\n        return [X, Y, Z]\n    }\n\n    /**\n     * XYZ to L*ab conversion like photoshop does\n     * @param {number[]} xyzArray\n     * @returns {number[]} labArray\n     */\n    const XYZ_Lab = function(xyzArray) {\n        // photoshop shows lab values with D50\n        return XYZ_CIELab(xyzArray, whitePoint.D50)\n    }\n\n    return {\n        rgb2XYZ: RGB_XYZ_compand,\n        XYZ2Lab: XYZ_Lab,\n        rgb2Lab: function(rgbArray, iccProfileName) {\n            const xyzArray = RGB_XYZ_compand(rgbArray, iccProfileName)\n            if (!xyzArray) return\n            const labArray = XYZ_CIELab(xyzArray, whitePoint.D50)\n            return labArray\n        },\n        cases: cases,\n    }\n})()\n\nexport default rgbLabConversion\n"],"names":["whitePoint","rgbSpaces","AdobeRGB1998","name","gamma","matrix","D50","X","red","green","blue","Y","Z","D65","whitepoint","eciRGB_v2","grayGamma22","sRGB","cases","squares","rgb","rgbLabConversion","inverseSRGB","fractionedRGB","iccProfile","map","channel","Math","pow","inverseLx","inverseGamma","XYZ_CIELab","xyzArray","sizedXYZ","index","RGB_XYZ_compand","rgbArray","iccProfileName","console","error","inverse","inversedRGB","rgb2XYZ","XYZ2Lab","rgb2Lab"],"mappings":"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"}